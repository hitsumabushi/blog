<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on ひつまぶし食べたい</title><link>https://www.hitsumabushi.org/tags/docker/</link><description>Recent content in Docker on ひつまぶし食べたい</description><generator>Hugo</generator><language>ja</language><copyright>&amp;copy; 2024 hitsumabushi</copyright><lastBuildDate>Fri, 01 Dec 2017 20:01:00 +0900</lastBuildDate><atom:link href="https://www.hitsumabushi.org/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Mesos の sandbox のログローテーションをする</title><link>https://www.hitsumabushi.org/blog/2017/12/01/2001/</link><pubDate>Fri, 01 Dec 2017 20:01:00 +0900</pubDate><guid>https://www.hitsumabushi.org/blog/2017/12/01/2001/</guid><description>&lt;h3 id="結論">結論&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://mesos.apache.org/documentation/latest/logging/#logrotatecontainerlogger">http://mesos.apache.org/documentation/latest/logging/#logrotatecontainerlogger&lt;/a>&lt;/li>
&lt;li>&lt;code>LogrotateContainerLogger&lt;/code> を使って、 module parameter を設定する&lt;/li>
&lt;/ul>
&lt;h3 id="概要">概要&lt;/h3>
&lt;p>Mesos + Marathon 環境でdockerを動かしている。
基本的にコンテナのログは fluentd で飛ばしているのだけど、日に日に mesos slave のディスク容量が圧迫されていた。
調べてみると、 &lt;code>/var/lib/mesos-slave/slaves/&lt;/code> 以下にあるフォルダのうち、sandbox のログが肥大化していた。
sandbox には stdout, stderr があって、それぞれコンテナのstdout, stderrを記録しているファイルで、mesosからファイルとして取得することができる。
長期的なものは fluentd で飛ばしているので問題ないため、障害時や直近の確認のために sandbox を使うことにして、
短期間でのログローテーションを行うことにした。&lt;/p></description></item><item><title>DockerHub で docker build のオプションを設定したい</title><link>https://www.hitsumabushi.org/blog/2016/09/27/1445/</link><pubDate>Tue, 27 Sep 2016 14:45:00 +0900</pubDate><guid>https://www.hitsumabushi.org/blog/2016/09/27/1445/</guid><description>&lt;h2 id="参考リポジトリ">参考リポジトリ&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/hitsumabushi/docker-phpipam">https://github.com/hitsumabushi/docker-phpipam&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="目的">目的&lt;/h2>
&lt;ul>
&lt;li>Dockerfile の中で、 ARGを使いたい。
&lt;ul>
&lt;li>LABEL としてビルドした日付や、 VCSのリビジョンを入れたい&lt;/li>
&lt;li>ソフトウェアのバージョンをARGで指定したい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="やること">やること&lt;/h2>
&lt;ol>
&lt;li>Dockerfile と同じ場所に、 &lt;code>hook&lt;/code> ディレクトリを作成する。&lt;/li>
&lt;li>&lt;code>hook&lt;/code> ディレクトリ以下に、 &lt;code>build&lt;/code> というファイルを作成する。
&lt;ul>
&lt;li>&lt;code>build&lt;/code> には、 build時に実行したいシェルスクリプトを書くと、build 時に実行される。&lt;/li>
&lt;li>自分で docker build &amp;hellip; というコマンドを書く&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="tips">TIPS&lt;/h2>
&lt;h3 id="dockerfileを別の場所に置く場合">Dockerfileを別の場所に置く場合&lt;/h3>
&lt;p>&lt;a href="https://github.com/hitsumabushi/docker-phpipam">https://github.com/hitsumabushi/docker-phpipam&lt;/a> では、 Dockerfile を、&lt;code>/dockerimages/phpipam/&lt;/code> 以下に置いている。
その場合であっても、 Dockerfileと同じディレクトリに、 &lt;code>hook&lt;/code> ディレクトリを作成すれば良い。
その上で、 DockerHub の Build Settings の Dockerfile Location にて、 &lt;code>/dockerimages/phpipam/Dockerfile&lt;/code> とすれば良い。&lt;/p></description></item><item><title>Dockerの細々としたメモ</title><link>https://www.hitsumabushi.org/blog/2015/09/15/0421/</link><pubDate>Tue, 15 Sep 2015 04:21:00 +0900</pubDate><guid>https://www.hitsumabushi.org/blog/2015/09/15/0421/</guid><description>&lt;p>Debian で利用する際のメモを書いておく。&lt;/p>
&lt;h2 id="grub-でのカーネルパラメータ">grub でのカーネルパラメータ&lt;/h2>
&lt;ol>
&lt;li>systemd を利用する設定&lt;/li>
&lt;li>cgroups で、メモリに制限をかけるための設定&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># quiet はあってもなくても良い&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">GRUB_CMDLINE_LINUX_DEFAULT&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;quiet init=/bin/systemd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">GRUB_CMDLINE_LINUX&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;cgroup_enable=memory swapaccount=1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cgroups-まわり">cgroups まわり&lt;/h2>
&lt;p>cgroups のディレクトリ配下に設定がある&lt;/p></description></item><item><title>Dockerのプロキシ設定</title><link>https://www.hitsumabushi.org/blog/2015/01/29/0754/</link><pubDate>Thu, 29 Jan 2015 07:54:00 +0900</pubDate><guid>https://www.hitsumabushi.org/blog/2015/01/29/0754/</guid><description>&lt;p>自宅ではプロキシを立てていないので問題なかったが、会社でDockerをいじろうとするとプロキシに阻まれてうまくいかず困っていた。
bashの環境変数を設定するのはうまくいかなくて、しばらく手元ではdockerをやらず、作業用マシンをクラウドに立ててどうにかごまかしていたのだけど、
あらためて考えると解決できた。&lt;/p></description></item></channel></rss>