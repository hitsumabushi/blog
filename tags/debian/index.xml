<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Debian on ひつまぶし食べたい</title><link>https://www.hitsumabushi.org/tags/debian/</link><description>Recent content in Debian on ひつまぶし食べたい</description><generator>Hugo</generator><language>ja</language><copyright>&amp;copy; 2024 hitsumabushi</copyright><lastBuildDate>Wed, 31 Oct 2018 19:01:00 +0900</lastBuildDate><atom:link href="https://www.hitsumabushi.org/tags/debian/index.xml" rel="self" type="application/rss+xml"/><item><title>DebianでLuaJITTeXを使いたい</title><link>https://www.hitsumabushi.org/post/2018/1901/</link><pubDate>Wed, 31 Oct 2018 19:01:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2018/1901/</guid><description>&lt;p>そろそろLuaTex使ってみたいなと思ったところ、LuaJITTeXの方が早い場合があるということで、試してみようと思った。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://www.fugenji.org/~thomas/texlive-guide/luajitlatex.html">luajittex のセットアップ&lt;/a>
&lt;ul>
&lt;li>そもそもこのサイトの情報が有用 &lt;a href="http://www.fugenji.org/~thomas/texlive-guide/index.html">TeX Live を使おう──主に Linux ユーザのために──&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="未解決の問題">未解決の問題&lt;/h2>
&lt;ul>
&lt;li>&lt;code>/var/lib/texmf/fmtutil.cnf-TEXLIVEDIST&lt;/code> が自動生成されている、とコメントされているが、元ファイルがわからない&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>### This file was automatically generated by update-fmtutil.
#
# Any local change will be overwritten. Please see the documentation
# of updmap on how to override things from here.
#
###
&lt;/code>&lt;/pre>&lt;h2 id="準備">準備&lt;/h2>
&lt;p>パッケージインストール&lt;/p></description></item><item><title>Debian でログインシェルをzshにしている人が snappy を使う場合の注意</title><link>https://www.hitsumabushi.org/post/2018/1058/</link><pubDate>Wed, 11 Apr 2018 10:58:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2018/1058/</guid><description>&lt;h2 id="snappy-について">Snappy について&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.ubuntu.com/desktop/snappy">Snappy&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://snapcraft.io/">snapcraft&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Canonical が主導しているパッケージシステムで、Universal Linux Package と銘打つように、ポータブルなパッケージングができそうな感じ。
ポータビリティを上げるために、dockerみたいな感じで、依存ライブラリも全部パッケージに含めてしまうスタイルなので、多少debパッケージよりは大きくなる。
その分、sidを使っているとよく起きる、共通ライブラリの依存バージョンの不整合がおきる、という問題は起きない。&lt;/p></description></item><item><title>Ansible でバージョンチェックする</title><link>https://www.hitsumabushi.org/post/2017/1402/</link><pubDate>Fri, 10 Nov 2017 14:02:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2017/1402/</guid><description>&lt;h2 id="やりたいこと">やりたいこと&lt;/h2>
&lt;p>サーバー管理には ansible を使っていますが、apt で入れているパッケージに対して、以下をやりたい状況がありました。&lt;/p>
&lt;ul>
&lt;li>インストールされていなかったらインストール&lt;/li>
&lt;li>あるバージョン未満だったらアップデート&lt;/li>
&lt;/ul>
&lt;p>pipやgemといった言語のパッケージマネージャと違って、apt ではバージョンの制約を書くことが面倒です。
いい感じに playbook の中でバージョン比較をして、インストール/アップデートすべきかを判定したいと考えました。&lt;/p></description></item><item><title>GnuPGのメモ @ Debian Sid</title><link>https://www.hitsumabushi.org/post/2016/482/</link><pubDate>Tue, 12 Jul 2016 07:42:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2016/482/</guid><description>&lt;h2 id="debain-での-gnupg">Debain での GnuPG&lt;/h2>
&lt;p>GnuPG は OpenPGPの実装の一つで、GPGと呼ばれることもあります。
Debian では、2016/07/12現在、gpg コマンドは 1.4系で、 gpg2 パッケージで 2.1系を提供しています。
普段使いでgpg 1.4系をわざわざ使う必要はないとは思うので、以下ではgpg2 を利用することにしています。
以下では、gpg と gpg2 の違いに触れることはありませんが、例えば、RSAではなく楕円暗号を使おうと思ったら、gpg2 を使うしかありません。&lt;/p></description></item><item><title>もともとgitで管理されているアプリケーションをdebパッケージにしたいというメモ</title><link>https://www.hitsumabushi.org/post/2016/428/</link><pubDate>Mon, 11 Jul 2016 04:28:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2016/428/</guid><description>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>debパッケージを作る経験が少ないので、あまり良い方法ではないかもしれない。&lt;/p>
&lt;h2 id="サンプル">サンプル&lt;/h2>
&lt;p>&lt;a href="https://github.com/hitsumabushi/hub">https://github.com/hitsumabushi/hub&lt;/a>&lt;/p>
&lt;h2 id="手順">手順&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># install&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt install fakeroot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># tag, release をきれいにする&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git tag -l &amp;gt; tag_list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">for&lt;/span> x in &lt;span style="color:#ff79c6">$(&lt;/span>cat tag_list&lt;span style="color:#ff79c6">)&lt;/span>; &lt;span style="color:#ff79c6">do&lt;/span> git push origin :&lt;span style="color:#8be9fd;font-style:italic">$x&lt;/span> ; &lt;span style="color:#ff79c6">done&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># 色々リポジトリを整理した後、空っぽの masterを作る&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout --orphan master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># 自前で control, copyright ファイルを書く&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># アップストリームのものを持ってくる&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># 参考: https://github.com/bcandrea/consul-deb/tree/debian/debian&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fakeroot dpkg-deb --build pkg tmp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># 生成された deb ファイルの中身を確認し、install してみる&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ar x &amp;lt;deb file&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># ... check files&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo dpkg -i &amp;lt;deb file&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># ... check installation&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># dpkg -s &amp;lt;package&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># dpkg -L &amp;lt;package&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># 問題がなければ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -a
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push origin master
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>s3で自前 Debian Package リポジトリを作る</title><link>https://www.hitsumabushi.org/post/2016/228/</link><pubDate>Sun, 10 Jul 2016 03:44:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2016/228/</guid><description>&lt;h2 id="この記事でやること">この記事でやること&lt;/h2>
&lt;ul>
&lt;li>aptly の初歩的な使い方&lt;/li>
&lt;li>aptly を使ってs3へ自前リポジトリを公開する。&lt;/li>
&lt;/ul>
&lt;p>自前パッケージの作成については、書かないです。&lt;/p>
&lt;h2 id="自前-debian-package-リポジトリ">自前 Debian Package リポジトリ&lt;/h2>
&lt;p>なぜ自前のリポジトリが欲しいかというと、個人的には以下の3つくらいかと思います。&lt;/p></description></item><item><title>Dockerの細々としたメモ</title><link>https://www.hitsumabushi.org/post/2015/273/</link><pubDate>Tue, 15 Sep 2015 04:21:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2015/273/</guid><description>&lt;p>Debian で利用する際のメモを書いておく。&lt;/p>
&lt;h2 id="grub-でのカーネルパラメータ">grub でのカーネルパラメータ&lt;/h2>
&lt;ol>
&lt;li>systemd を利用する設定&lt;/li>
&lt;li>cgroups で、メモリに制限をかけるための設定&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># quiet はあってもなくても良い&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">GRUB_CMDLINE_LINUX_DEFAULT&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;quiet init=/bin/systemd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">GRUB_CMDLINE_LINUX&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;cgroup_enable=memory swapaccount=1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cgroups-まわり">cgroups まわり&lt;/h2>
&lt;p>cgroups のディレクトリ配下に設定がある&lt;/p></description></item><item><title>runCをDebianで実行する</title><link>https://www.hitsumabushi.org/post/2015/2047/</link><pubDate>Tue, 23 Jun 2015 20:47:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2015/2047/</guid><description>&lt;p>&lt;a href="https://github.com/opencontainers/runc">opencontainers/runc&lt;/a> を実行してみようとしたところ、コンパイルまではすぐできるのに、実行するとエラーが出て困ったので、対処方法を書いておく。&lt;/p>
&lt;h2 id="runcのインストール">runCのインストール&lt;/h2>
&lt;p>golang的に普通の場所に置いてビルドすると良い。git clone の代わりに go getでも良い。&lt;/p></description></item><item><title>Xmonadの設定</title><link>https://www.hitsumabushi.org/post/2015/138/</link><pubDate>Sun, 05 Apr 2015 01:38:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2015/138/</guid><description>&lt;h2 id="資料">資料&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="http://xmonad.org/documentation.html">http://xmonad.org/documentation.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://archlinuxjp.kusakata.com/wiki/Xmonad?rdfrom=https%3A%2F%2Fwiki.archlinux.org%2Findex.php%3Ftitle%3DXmonad_%28%25E6%2597%25A5%25E6%259C%25AC%25E8%25AA%259E%29%26redirect%3Dno">Archlinux Wiki - Xmonad&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.haskell.org/Xmonad/Config_archive/John_Goerzen's_Configuration">Xmonad/Config archive/John Goerzen&amp;rsquo;s Configuration&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://blog.blueblack.net/item_424.html">Xmonadの設定 1/3 「基本」編 - ナレッジエース&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="環境">環境&lt;/h2>
&lt;p>Debian Sid &amp;amp; Xfce4&lt;/p>
&lt;h2 id="install-and-initial-configure">Install and Initial Configure&lt;/h2>
&lt;h3 id="package-install">Package install&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># basic packages&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install xmonad libghc-xmonad-dev libghc-xmonad-contrib-dev
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># for adding launcher&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install dmenu
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># for status bar&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install xmobar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4"># tools&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo apt-get install suckless-tools scrot tilda trayer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="xsession">Xsession&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>add &lt;code>/usr/share/xsessions/custom.desktop&lt;/code>&lt;/p></description></item><item><title>Dockerのプロキシ設定</title><link>https://www.hitsumabushi.org/post/2015/492/</link><pubDate>Thu, 29 Jan 2015 07:54:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2015/492/</guid><description>&lt;p>自宅ではプロキシを立てていないので問題なかったが、会社でDockerをいじろうとするとプロキシに阻まれてうまくいかず困っていた。
bashの環境変数を設定するのはうまくいかなくて、しばらく手元ではdockerをやらず、作業用マシンをクラウドに立ててどうにかごまかしていたのだけど、
あらためて考えると解決できた。&lt;/p></description></item><item><title>DNS サーバーの比較資料集め</title><link>https://www.hitsumabushi.org/post/2015/202/</link><pubDate>Mon, 26 Jan 2015 03:12:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2015/202/</guid><description>&lt;p>自宅開発環境を一新するついでに、真面目にサーバー構成を見直すことにした。
DNSサーバーは今までbind+dnsmasqでやっていたが、改めてパフォーマンスの観点から選定したい。
以下に、参考ページを列挙する。&lt;/p></description></item><item><title>DebianにOzをインストールする</title><link>https://www.hitsumabushi.org/post/2014/1637/</link><pubDate>Sun, 27 Jul 2014 16:37:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2014/1637/</guid><description>&lt;p>ガウディ本読みはじめた。&lt;/p>
&lt;iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&amp;bc1=000000&amp;IS2=1&amp;nou=1&amp;bg1=FFFFFF&amp;fc1=000000&amp;lc1=0000FF&amp;t=l0fb-22&amp;o=9&amp;p=8&amp;l=as4&amp;m=amazon&amp;f=ifr&amp;ref=ss_til&amp;asins=4798113468" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0">&lt;/iframe>
&lt;h2 id="困ったこと">困ったこと&lt;/h2>
&lt;p>この本で使われるOzという言語をDebian上で実行するのに、少し困った。
morzart2をダウンロードして、適当にインストールしただけだと、
emacs上でコンパイルはできるのに、実行結果が表示できない状況になった。
正常な動作は、コンパイルできるとウィンドウが開いて、そこに結果が表示される。&lt;/p></description></item><item><title>DebianでZNCを使って、快適なIRC生活を送る</title><link>https://www.hitsumabushi.org/post/2014/1634/</link><pubDate>Mon, 09 Jun 2014 16:34:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2014/1634/</guid><description>&lt;h2 id="やりたいこと">やりたいこと&lt;/h2>
&lt;p>最近、自分の興味のあるソフトウェアのIRCによく引きこもっています。
自宅のPCはつけっぱなしにしておけば、全部のログを見れるのですが、
会社やスマホで見るときには、接続している間のことしか確認できず、若干もどかしいです。&lt;/p></description></item><item><title>LEDバックライトの調整</title><link>https://www.hitsumabushi.org/post/2014/1631/</link><pubDate>Mon, 02 Jun 2014 16:31:00 +0900</pubDate><guid>https://www.hitsumabushi.org/post/2014/1631/</guid><description>&lt;p>ディスプレイの輝度が高すぎて目が痛いので、輝度を下げたい。
GUIでやっても良いけど、CLIの方が簡単そうだったので、CLIでやってみることにした。&lt;/p></description></item></channel></rss>